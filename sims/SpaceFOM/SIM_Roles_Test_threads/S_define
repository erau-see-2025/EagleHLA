//==========================================================================
// Space Reference FOM: Simulation to test the SpaceFOM roles implementation.
//==========================================================================
// Description:
// This is a simulation definition file (S_define) that provides an example
// of an SpaceFOM compliant federate that services all SpaceFOM roles.
//==========================================================================

//==========================================================================
// Define the Trick executive and services simulation object instances:
// Use the "standard" Trick executive simulation object. This simulation
// object provides the traditional Trick executive capabilities but can be
// tailored to provide facility or project unique executive behavior. See
// the Trick documentation for more on usage and available options.
//==========================================================================
#include "sim_objects/default_trick_sys.sm"

//==========================================================================
// Define the Trick HLA job cycle times.
//==========================================================================
#define THLA_DATA_CYCLE_TIME        0.250 // HLA data communication cycle time.
#define THLA_INTERACTION_CYCLE_TIME 0.050 // HLA Interaction cycle time.

//==========================================================================
// Define the HLA phase initialization priorities.
//==========================================================================
#define P_HLA_INIT   60    // HLA initialization phase.
#define P_HLA_EARLY  1     // HLA early job phase.
#define P_HLA_LATE   65534 // HLA late job phase.


//==========================================================================
// Trick HLA and SpaceFOM include files used in SimObject definitions or
// for input file instantiations.
//==========================================================================
// This is needed for CTE timeline instantiation in the input file.
##include "TrickHLA/CTETimelineBase.hh"

// TrickHLA support for Trick Child Threads.
#include "THLAThread.sm"


//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
//==========================================================================
#include "SpaceFOM/SpaceFOM.sm"

%header{
 using namespace TrickHLA;
 using namespace SpaceFOM;
%}


//==========================================================================
// SIM_OBJECT: THLA_INIT - An example of a TrickHLA multi-phase
// initialization SimObject.
//==========================================================================
class THLAInitSimObject : public Trick::SimObject {

 public:

   THLAInitSimObject( TrickHLA::Manager  & thla_mngr,
                      TrickHLA::Federate & thla_fed   )
      : thla_manager( thla_mngr ),
        thla_federate( thla_fed )
   {
      //--------------------------------------------------------------------
      // NOTE: Initialization phase numbers must be greater than P60
      // (i.e. P_HLA_INIT) so that the initialization jobs run after the
      // P60 THLA.manager->initialize() job.
      //--------------------------------------------------------------------

      // Alternative method: Send and receive all the initialization data.

      // Send all the initialization data.
      P100 ("initialization") thla_manager.send_init_data();

      // Wait to receive all the initialization data.
      P100 ("initialization") thla_manager.receive_init_data();

      // Do some processing here if needed...

      // Clear remaining initialization sync-points.
      P100 ("initialization") thla_manager.clear_init_sync_points();
   }

 private:
   TrickHLA::Manager  & thla_manager;
   TrickHLA::Federate & thla_federate;

   // Do not allow the implicit copy constructor or assignment operator.
   THLAInitSimObject( THLAInitSimObject const & rhs );
   THLAInitSimObject & operator=( THLAInitSimObject const & rhs );

   // Do not allow the default constructor.
   THLAInitSimObject();
};


//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameTreeSimObject - An example reference frame tree
// simulation object definition.
//==========================================================================
#include "SpaceFOM/RefFrameTreeBase.sm"
class SpaceFOMTestRefFrameTreeSimObject : public SpaceFOMRefFrameTreeBaseSimObject {

  public:

   // Working SpaceFOM reference frames.
   SpaceFOM::RefFrameData root_frame_data;
   SpaceFOM::RefFrameData vehicle_frame_data;

   // References to working SpaceFOM reference frames.
   SpaceFOM::RefFrameBase * root_frame_ptr;
   SpaceFOM::RefFrameBase * vehicle_frame_ptr;

   // _ADD and _BUILD phases need to be less than 60, when TrickHLA is initialized.
   SpaceFOMTestRefFrameTreeSimObject( TrickHLA::Manager          & thla_manager_in,
                                      SpaceFOM::ExecutionControl & exec_cntrl_in,
                                      unsigned short               _BUILD = (P_HLA_INIT+1) )
      : SpaceFOMRefFrameTreeBaseSimObject( thla_manager_in, exec_cntrl_in, _BUILD ),
        root_frame_ptr( NULL ),
        vehicle_frame_ptr( NULL )
   {
      return;
   }

  private:
   // Define the interface to configure the reference frame tree.
   void configure_tree()
   {
      std::ostringstream errmsg;

      // Check for objects allocation.
      if ( (thla_manager.obj_count == 0) || (thla_manager.objects == NULL) ){
         errmsg << "SpaceFOMRefFrameTreeSimObject::configure_tree():" << __LINE__
                << " ERROR: The TrickHLAManager Object array has not been allocated!" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Setup the root reference frame.
      root_frame_ptr->base_config( false,
                                   "root_ref_frame",
                                   "frame_packing",
                                   "RootFrame"      );

      // Set the root reference frame in the ExCO.
      exec_cntrl.root_ref_frame = root_frame_ptr;

      // Setup the Sun inertial reference frame.
      vehicle_frame_ptr->base_config( false,
                                      "vehicle_frame",
                                      "frame_packing",
                                      "FrameA",
                                      "RootFrame",
                                      root_frame_ptr );

      return;
   }

  private:

   // This object is not copyable
   SpaceFOMTestRefFrameTreeSimObject( SpaceFOMTestRefFrameTreeSimObject const & );
   SpaceFOMTestRefFrameTreeSimObject & operator=( SpaceFOMTestRefFrameTreeSimObject const & );
};


//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameSimObject - An example reference frame
// simulation object definition. This can be used for SpaceFOM ReferenceFrame
// object discovery and data exchange.
//==========================================================================
// SpaceFOM include files.
##include "SpaceFOM/RefFrameState.hh"
##include "SpaceFOM/RefFrameBase.hh"
##include "SpaceFOM/RefFrameLagComp.hh"
##include "SpaceFOM/RefFrameConditionalBase.hh"
##include "SpaceFOM/RefFrameOwnershipHandler.hh"
##include "SpaceFOM/RefFrameDeleted.hh"

class SpaceFOMRefFrameSimObject : public THLAThreadSimObject {

  public:

   /* HLA associated reference frames packing object. */
   SpaceFOM::RefFrameState frame_packing;

   /* HLA lag compensation object. */
   SpaceFOM::RefFrameLagComp lag_compensation;

   /* HLA conditional object. */
   SpaceFOM::RefFrameConditionalBase conditional;

   /* HLA Ownership Handler object. */
   SpaceFOM::RefFrameOwnershipHandler ownership_handler;

   /* HLA RefFrame deleted object. */
   SpaceFOM::RefFrameDeleted deleted_callback;

   SpaceFOMRefFrameSimObject( RefFrameData       & frame_data_ref,
                              TrickHLA::Federate & thla_fed,
                              double               main_thread_data_cycle,
                              double               child_thread_data_cycle,
                              unsigned short       _THREAD_ID,
                              unsigned short       _INIT = 59  )
      : THLAThreadSimObject( thla_fed,
                             main_thread_data_cycle,
                             child_thread_data_cycle,
                             _THREAD_ID ),
        frame_packing(frame_data_ref),
        lag_compensation(frame_packing),
        conditional( frame_packing ),
        ref_frame_data_ptr( &frame_data_ref )
   {
      //
      // Initialization jobs
      //
      P_INIT ("initialization") frame_packing.initialize();
      P_INIT ("initialization") lag_compensation.initialize();

      // Example job running as a child thread with the thread-ID passed in
      // from the sim-object constructor.
      // C_THREAD_ID (DYN_RATE, "scheduled") example_job.compute_value();
   }

  private:
   RefFrameData * ref_frame_data_ptr;

   // This object is not copyable
   SpaceFOMRefFrameSimObject( SpaceFOMRefFrameSimObject const & );
   SpaceFOMRefFrameSimObject & operator=( SpaceFOMRefFrameSimObject const & );
};


//==========================================================================
// SimObject instantiations.
//==========================================================================
// Main TrickHLA SimObject.
SpaceFOMSimObject THLA( THLA_DATA_CYCLE_TIME, THLA_INTERACTION_CYCLE_TIME,
                        P_HLA_EARLY, P_HLA_INIT, P_HLA_LATE );

// SimObject used capture simulation specific initialization.
THLAInitSimObject THLA_INIT( THLA.manager, THLA.federate );

// SimObject used for root reference frame discovery.
SpaceFOMTestRefFrameTreeSimObject ref_frame_tree( THLA.manager,
                                                  THLA.execution_control );

SpaceFOMRefFrameSimObject root_ref_frame( ref_frame_tree.root_frame_data,
                                          THLA.federate,
                                          THLA_DATA_CYCLE_TIME, // Main thread data cycle time.
                                          THLA_DATA_CYCLE_TIME, // Child thread data cycle time.
                                          1 );                  // Trick child thread 1 (i.e. C1).

SpaceFOMRefFrameSimObject ref_frame_A( ref_frame_tree.vehicle_frame_data,
                                       THLA.federate,
                                       THLA_DATA_CYCLE_TIME, // Main thread data cycle time.
                                       THLA_DATA_CYCLE_TIME, // Child thread data cycle time.
                                       2 );                  // Trick child thread 2 (i.e. C2).


//==========================================================================
// Create the THLA connections for the SpaceFOM Reference Frame Tree.
//==========================================================================
void create_connections() {

   // Make the connections for the root and child frame in the reference frame tree.
   ref_frame_tree.root_frame_ptr = &root_ref_frame.frame_packing;
   ref_frame_tree.vehicle_frame_ptr = &ref_frame_A.frame_packing;

}
